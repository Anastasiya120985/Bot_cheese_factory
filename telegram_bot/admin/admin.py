import asyncio
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession
from telegram_bot.config import admins, bot
from telegram_bot.dao.dao import UserDAO, ProductDao, CategoryDao, PurchaseDao
from telegram_bot.admin.kbs import admin_kb, admin_kb_back, product_management_kb, cancel_kb_inline, catalog_admin_kb, \
    admin_send_file_kb, admin_confirm_kb, dell_change_product_kb, change_product_kb
from telegram_bot.admin.schemas import ProductModel, ProductIDModel
from telegram_bot.admin.utils import process_dell_text_msg

admin_router = Router()


class AddProduct(StatesGroup):
    name = State()
    description = State()
    min_packing = State()
    price = State()
    image = State()
    category_id = State()
    confirm_add = State()


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@admin_router.callback_query(F.data == "admin_panel", F.from_user.id.in_(admins))
async def start_admin(call: CallbackQuery):
    await call.answer('–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!')
    await call.message.edit_text(
        text="–í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        reply_markup=admin_kb()
    )


# –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É
@admin_router.callback_query(F.data == 'statistic', F.from_user.id.in_(admins))
async def admin_statistic(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
    await call.answer('üìä –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')

    stats = await UserDAO.get_statistics(session=session_without_commit)
    total_summ = await PurchaseDao.get_full_summ(session=session_without_commit)
    stats_message = (
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['new_today']}\n"
        f"üìÖ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_week']}\n"
        f"üìÜ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['new_month']}\n\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_summ} —Ä—É–±.\n\n"
        "üïí –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç."
    )
    await call.message.edit_text(
        text=stats_message,
        reply_markup=admin_kb()
    )


@admin_router.callback_query(F.data == 'process_products', F.from_user.id.in_(admins))
async def admin_process_products(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏')
    all_products_count = await ProductDao.count(session=session_without_commit)
    await call.message.edit_text(
        text=f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {all_products_count} —Ç–æ–≤–∞—Ä–æ–≤. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
        reply_markup=product_management_kb()
    )


@admin_router.callback_query(F.data == 'delete_product', F.from_user.id.in_(admins))
async def admin_process_start_dell_change(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤')
    all_products = await ProductDao.find_all(session=session_without_commit)

    await call.message.edit_text(
        text=f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    )
    for product_data in all_products:
        image = product_data.image
        product_text = (f'üõí –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n'
                        f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data.name}\n'
                        f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n{product_data.description}\n\n'
                        f'üîπ <b>–¶–µ–Ω–∞:</b> {product_data.price} —Ä—É–±. / {product_data.min_packing}')
        if image:
            await call.message.answer_photo(photo=image, caption=product_text,
                                            reply_markup=dell_change_product_kb(product_data.id))
        else:
            await call.message.answer(text=product_text, reply_markup=dell_change_product_kb(product_data.id))


@admin_router.callback_query(F.data.startswith('dell_'), F.from_user.id.in_(admins))
async def admin_process_start_dell(call: CallbackQuery, session_with_commit: AsyncSession):
    product_id = int(call.data.split('_')[-1])
    await ProductDao.delete(session=session_with_commit, filters=ProductIDModel(id=product_id))
    await call.answer(f"–¢–æ–≤–∞—Ä —Å ID {product_id} —É–¥–∞–ª–µ–Ω!", show_alert=True)
    await call.message.delete()


@admin_router.callback_query(F.data.startswith('change_'), F.from_user.id.in_(admins))
async def admin_process_start_change(call: CallbackQuery, session_with_commit: AsyncSession):
    product_id = int(call.data.split('_')[-1])

    product_data = await ProductDao.find_one_or_none_by_id(session=session_with_commit, data_id=product_id)
    image = product_data.image
    product_text = (f'üõí –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n'
                    f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data.name}\n'
                    f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n{product_data.description}\n\n'
                    f'üîπ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b>\n\n{product_data.cat}\n\n'
                    f'üîπ <b>–¶–µ–Ω–∞:</b> {product_data.price} —Ä—É–±. / {product_data.min_packing}')
    if image:
        await call.message.answer_photo(photo=image, caption=product_text,
                                        reply_markup=change_product_kb())
    else:
        await call.message.answer(text=product_text, reply_markup=change_product_kb())


    await ProductDao.update(session=session_with_commit, filters=ProductIDModel(id=product_id))
    await call.answer(f"–¢–æ–≤–∞—Ä —Å ID {product_id} —É–¥–∞–ª–µ–Ω!", show_alert=True)
    await call.message.delete()


#
@admin_router.callback_query(F.data == "cancel", F.from_user.id.in_(admins))
async def admin_process_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–û—Ç–º–µ–Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
    await call.message.delete()
    await call.message.answer(
        text="–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.",
        reply_markup=admin_kb_back()
    )


@admin_router.callback_query(F.data == 'add_product', F.from_user.id.in_(admins))
async def admin_process_add_product(call: CallbackQuery, state: FSMContext):
    await call.answer('–ó–∞–ø—É—â–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.')
    await call.message.delete()
    msg = await call.message.answer(text="–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞: ", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddProduct.name)


@admin_router.message(F.text, F.from_user.id.in_(admins), AddProduct.name)
async def admin_process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await process_dell_text_msg(message, state)
    msg = await message.answer(text="–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä—É: ", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddProduct.description)


@admin_router.message(F.text, F.from_user.id.in_(admins), AddProduct.description)
async def admin_process_description(message: Message, state: FSMContext, session_without_commit: AsyncSession):
    await state.update_data(description=message.html_text)
    await process_dell_text_msg(message, state)
    catalog_data = await CategoryDao.find_all(session=session_without_commit)
    msg = await message.answer(text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: ", reply_markup=catalog_admin_kb(catalog_data))
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddProduct.category_id)


@admin_router.callback_query(F.data.startswith("add_category_"),
                             F.from_user.id.in_(admins),
                             AddProduct.category_id)
async def admin_process_category(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split("_")[-1])
    await state.update_data(category_id=category_id)
    await call.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞.')
    msg = await call.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞: ", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddProduct.price)


@admin_router.message(F.text, F.from_user.id.in_(admins), AddProduct.price)
async def admin_process_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        await process_dell_text_msg(message, state)
        msg = await message.answer(
            text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '–ë–ï–ó –§–û–¢–û', –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è",
            reply_markup=admin_send_file_kb()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(AddProduct.image)
    except ValueError:
        await message.answer(text="–û—à–∏–±–∫–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã.")
        return


@admin_router.callback_query(F.data == "without_file", F.from_user.id.in_(admins), AddProduct.image)
async def admin_process_without_file(call: CallbackQuery, state: FSMContext):
    await state.update_data(image=None)
    await call.answer('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.')
    msg = await call.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddProduct.min_packing)


@admin_router.message(F.text, F.from_user.id.in_(admins), AddProduct.image)
async def admin_process_without_file(message: Message, state: FSMContext):
    await state.update_data(image=message.text)
    await process_dell_text_msg(message, state)
    msg = await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddProduct.min_packing)


@admin_router.message(F.text, F.from_user.id.in_(admins))
async def admin_process_hidden_content(message: Message, state: FSMContext, session_without_commit: AsyncSession):
    await state.update_data(min_packing=message.text)

    product_data = await state.get_data()
    category_info = await CategoryDao.find_one_or_none_by_id(session=session_without_commit,
                                                             data_id=product_data.get("category_id"))

    image = product_data["image"]

    product_text = (f'üõí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:\n\n'
                    f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data["name"]}\n\n'
                    f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{product_data["description"]}\n\n'
                    f'üîπ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞:</b>\n {product_data["min_packing"]}\n\n'
                    f'üîπ <b>–¶–µ–Ω–∞:</b> {product_data["price"]} ‚ÇΩ\n\n'
                    f'üîπ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_info.category_name} (ID: {category_info.id})')
    await process_dell_text_msg(message, state)

    if image:
        msg = await message.answer_photo(photo=image, caption=product_text, reply_markup=admin_confirm_kb())
    else:
        msg = await message.answer(text=product_text, reply_markup=admin_confirm_kb())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddProduct.confirm_add)


@admin_router.callback_query(F.data == "confirm_add", F.from_user.id.in_(admins))
async def admin_process_confirm_add(call: CallbackQuery, state: FSMContext, session_with_commit: AsyncSession):
    await call.answer('–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Ñ–∞–π–ª–∞!')
    product_data = await state.get_data()
    await bot.delete_message(chat_id=call.from_user.id, message_id=product_data["last_msg_id"])
    del product_data["last_msg_id"]
    await ProductDao.add(session=session_with_commit, values=ProductModel(**product_data))
    await call.message.answer(text="–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", reply_markup=admin_kb())

# @admin_router.callback_query(F.data == 'cooking_cheese', F.from_user.id.in_(settings.ADMIN_IDS))
# async def admin_cooking_cheese(call: CallbackQuery, state: FSMContext):
#     await call.answer('–í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞—Ä–∫–µ —Å—ã—Ä–∞')
#     await call.message.delete()
#     msg = await call.message.answer(text="–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞: ", reply_markup=cancel_kb_inline())
#     await state.update_data(last_msg_id=msg.message_id)
#     await state.set_state(AddProduct.name)
